@page "/activities"
@inject HttpClient Http
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>Activities</PageTitle>
<h1>Activities</h1>
<p>This is the activities overview page.</p>

@if (activities.Count == 0)
{
	<p>Loading...</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Deal</th>
				<th>Type</th>
				<th>Note</th>
				<th>Date</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var activity in activities)
			{
				<tr>
					<td>@deals.FirstOrDefault(d => d.DealId == activity.FkDealId)?.DealName</td>
					<td>@activityTypes.FirstOrDefault(at => at.ActivityTypeId == activity.FkActivityTypeId)?.TypeName</td>
					<td>@activity.ActivityNote</td>
					<td>@activity.ActivityDate.ToShortDateString()</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	List<Activity> activities = new List<Activity>();
	List<Deal> deals = new List<Deal>();
	List<ActivityType> activityTypes = new List<ActivityType>();

	protected override async Task OnInitializedAsync()
	{
		var activityResult = await ActivityService.GetActivitiesAsync();
		var dealResult = await DealService.GetDealsAsync();
		var activityTypeResult = await ActivityTypeService.GetActivitiesTypeAsync();

		activities.Clear();
		deals.Clear();
		activityTypes.Clear();

		foreach (var activity in activityResult)
		{
			activities.Add(activity);
		}

		foreach (var deal in dealResult)
		{
			deals.Add(deal);
		}

		foreach (var activityType in activityTypeResult)
		{
			activityTypes.Add(activityType);
		}
	}
}
