@page "/activities"
@inject HttpClient Http
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>Activities</PageTitle>
<h1>Activities</h1>
<p>This is the activities overview page.</p>

<div class="filter-container">
    <label for="filterField">Filter By:</label>
    <select id="filterField" @bind="selectedField">
        <option value="" selected disabled>Select field</option>
        <option value="Deal">Deal</option>
        <option value="Type">Type</option>
    </select>

    <SearchBox Items="filteredActivities" OnSearch="UpdateFilteredActivities" />
</div>

<div>
    <button class="btn btn-primary" style="margin-bottom: 20px;" @onclick='()=>OpenModal(new Activity(), "add")'>
        <i class="bi bi-person-plus"></i> Add Activity
    </button>
</div>

<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>#</th>
                <th>Deal</th>
                <th>Type</th>
                <th>Note</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredActivities != null && filteredActivities.Any())
            {
                int count = 1;
                @foreach (var activity in filteredActivities)
                {
                    <tr>
                        <th scope="row">@count</th>

                        <td>@deals.FirstOrDefault(d => d.DealId == activity.FkDealId)?.DealName</td>
                        <td>@activityTypes.FirstOrDefault(at => at.ActivityTypeId == activity.FkActivityTypeId)?.TypeName</td>
                        <td>@activity.ActivityNote</td>
                        <td>@activity.ActivityDate.ToShortDateString()</td>
                        <td>
                            <div class="hstack gap-2">
                                <button class="btn btn-secondary" @onclick='()=>OpenModal(activity, "view")'>
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn btn-primary" @onclick='()=>OpenModal(activity, "edit")'>
                                    <i class="bi bi-pencil"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                    count++;
                }
            }
            else
            {
                <div class="alert alert-info">
                    <p>There are currently no leads in the database. Please check back later or add a new activity.</p>
                    <button class="btn btn-primary" style="margin-bottom: 20px;" @onclick='()=>OpenModal(new Activity(), "add")'>
                        <i class="bi bi-person-plus"></i> Add Activity
                    </button>
                </div>
            }
        </tbody>
    </table>
</div>

@if (IsModalVisible)
{
    <div class="modal" tabindex="-1" style="display:block">
        <button type="button" class="btn-close" @onclick="CloseModal"></button>
        <div class="modal-body">
            <ActivityForm Activity="selectedActivity" deals="deals" types="activityTypes" OnSubmit="HandleSubmit" IsModalVisible="IsModalVisible" IsModalVisibleChanged="((bool b) => IsModalVisible = b)" Mode="@Mode" />
        </div>
    </div>
}

@code {
    List<Activity> activities = new List<Activity>();
    List<Deal> deals = new List<Deal>();
    List<ActivityType> activityTypes = new List<ActivityType>();

    List<Activity> filteredActivities = new();
    private string? selectedField;
    private int currentPage = 1;
    private int defaultPageSize = 10;
    private int pageSize;
    private int totalActivities;
    private int totalPages;
    private string searchTerm = string.Empty;
    private Activity selectedActivity = new();
    private bool IsModalVisible { get; set; }
    private string Mode = string.Empty;

    private async Task OnSearchTermChanged(string newSearchTerm)
    {
        searchTerm = newSearchTerm;
        await LoadActivities();
    }

    protected async Task ShowPage(int i)
    {
        currentPage = i;
        await LoadActivities();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadActivities();
        await LoadTypes();
        await LoadDeals();
    }

    private async Task LoadActivities()
    {
        var result = await ActivityService.GetActivitiesAsync(filterOn: selectedField, filterQuery: searchTerm, pageNumber: currentPage, pageSize: pageSize);
        activities.Clear();
        if (result == null)
            return;

        activities = result.ToList();
        UpdateFilteredActivities(searchTerm);
    }

    private async Task LoadDeals()
    {
        var result = await DealService.GetDealsAsync(filterOn: selectedField, filterQuery: searchTerm, pageNumber: currentPage, pageSize: pageSize);
        deals.Clear();
        if (result == null)
            return;

        deals = result.ToList();
        UpdateFilteredActivities(searchTerm);
    }

    private async Task LoadTypes()
    {
        var result = await ActivityTypeService.GetActivitiesTypeAsync();
        activityTypes.Clear();
        if (result == null)
            return;

        activityTypes = result.ToList();
        UpdateFilteredActivities(searchTerm);
    }

    private void UpdateFilteredActivities(string searchTerm)
    {
        IEnumerable<Activity> filtered = activities;

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = activities.Where(actv =>
            {
                switch (selectedField)
                {
                    case "Deal":
                        var deal = deals.FirstOrDefault(c => c.DealId == actv.FkDealId);
                        return deal?.DealName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false;
                    case "Type":
                        var type = activityTypes.FirstOrDefault(c => c.ActivityTypeId == actv.FkActivityTypeId);
                        return type?.TypeName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false;
                    default:
                        return false;
                }
            });
        }
        pageSize = !string.IsNullOrEmpty(searchTerm) ? filtered.Count() : defaultPageSize;
        totalActivities = filtered.Count();
        totalPages = (int)Math.Ceiling((double)totalActivities / pageSize);

        filteredActivities = filtered
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task HandleSubmit(Activity activity)
    {
        if (Mode == "add")
        {
            await ActivityService.AddActivityAsync(activity);
        }
        if (Mode == "view")
        {
            await ActivityService.GetActivityAsync(activity.ActivityId);
        }
        if (Mode == "edit")
        {
            await ActivityService.UpdateActivityAsync(activity);
        }

        await LoadActivities();
        IsModalVisible = false;
    }

    private void OpenModal(Activity activity, string mode)
    {
        selectedActivity = activity;
        Mode = mode;
        IsModalVisible = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        IsModalVisible = false;
        StateHasChanged();
    }
}
