@page "/deals"
@inject HttpClient Http
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>Deals</PageTitle>
<h1>Deals</h1>
<p>This is the deals overview page.</p>


@if (deals.Count == 0)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Customer</th>
                <th>Company</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Priority</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var deal in deals)
            {
                <tr>
                    <td>@customers.FirstOrDefault(c => c.CustomerId == deal.FkCompanyId)?.FirstName + ' ' + @customers.FirstOrDefault(c => c.CustomerId == deal.FkCompanyId)?.LastName</td>
                    <td>@companies.FirstOrDefault(c => c.CompanyId == deal.FkCompanyId)?.CompanyName</td>
                    <td>@dealStatus.FirstOrDefault(ds => ds.DealStatusId == deal.FkDealStatusId)?.StatusName</td>
                    <td>@priority.FirstOrDefault(p => p.PriorityId == deal.FkPriorityId)?.PriorityName</td>
                    <td>
                        <div class="hstack gap-2">
                            <i class="oi oi-pencil text-info"></i>
                            <i class="oi oi-trash text-danger"></i>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    List<Deal> deals = new List<Deal>();
    List<Company> companies = new List<Company>();
    List<Customer> customers = new List<Customer>();
    List<DealStatus> dealStatus = new List<DealStatus>();
    List<Priority> priority = new List<Priority>();

    protected override async Task OnInitializedAsync()
    {
        var dealResult = await DealService.GetDealsAsync();
        var customerResult = await CustomerService.GetCustomersAsync();
        var companyResult = await CompanyService.GetCompaniesAsync();
        var dealStatusResult = await DealStatusService.GetDealStatusesAsync();
        var priorityResult = await PriorityService.GetPrioritiesAsync();

        deals.Clear();
        customers.Clear();
        companies.Clear();
        dealStatus.Clear();
        priority.Clear();

        if (dealResult == null)
            return;

        foreach (var deal in dealResult)
        {
            deals.Add(deal);
        }

        foreach (var customer in customerResult)
        {
            customers.Add(customer);
        }

        foreach (var company in companyResult)
        {
            companies.Add(company);
        }

        foreach (var status in dealStatusResult)
        {
            dealStatus.Add(status);
        }

        foreach (var p in priorityResult)
        {
            priority.Add(p);
        }
    }
}
