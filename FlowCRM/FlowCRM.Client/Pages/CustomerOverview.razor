@page "/customers"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>Customers</PageTitle>
<h1>Customers</h1>
<p>This is the customer overview page.</p>
<button class="btn btn-primary" @onclick='()=>OpenModal(new Customer(), "add")'>
    <i class="bi bi-person-plus"></i> Add Customer
</button>


<table class="table">
    <thead>
        <tr>
            <th>#</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Country</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (customers is not null)
        {
            int count = 1;
            @foreach (var customer in customers)
            {
                <tr>
                    <th scope="row">@count</th>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.Email</td>
                    <td>@customer.Country</td>
                    <td>
                        <div class="hstack gap-2">
                            <button class="btn btn-secondary" @onclick='()=>OpenModal(customer, "view")'>
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn btn-primary" @onclick='()=>OpenModal(customer, "edit")'>
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-danger" @onclick="()=>DeleteCustomer(customer.CustomerId)">
                                <i class=" bi bi-trash">
                                </i>
                            </button>

                            @if (IsModalVisible)
                            {
                                <div class="modal" tabindex="-1" style="display:block">
                                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                                </div>
                                <div class="modal-body">
                                    <CustomerForm Customer="selectedCustomer" OnSubmit="HandleSubmit" IsModalVisible="IsModalVisible" IsModalVisibleChanged="((bool b) => IsModalVisible = b)" Mode="@Mode" />
                                </div>

                            }
                        </div>
                    </td>
                </tr>
                count++;
            }
        }
        else
        {
            <div class="alert alert-info">
                <p>There are currently no customers in the database. Please check back later or add a new customer.</p>
            </div>
        }
    </tbody>
</table>


@code {
    List<Customer> customers = new List<Customer>();
    private Customer selectedCustomer = new();
    private bool IsModalVisible { get; set; }
    private Customer addedCustomer = new();
    private string Mode = string.Empty;

    private void OpenModal(Customer customer, string mode)
    {
        selectedCustomer = customer;
        Mode = mode;
        IsModalVisible = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        IsModalVisible = false;
        StateHasChanged();
    }

    private async Task LoadCustomers()
    {
        var result = await CustomerService.GetCustomersAsync();
        customers.Clear();
        if (result == null)
            return;

        foreach (var customer in result)
        {
            customers.Add(customer);
        }
    }

    private async Task DeleteCustomer(Guid customerId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
        if (confirmed)
        {
            await CustomerService.DeleteCustomerAsync(customerId);
            await LoadCustomers();
        }
    }

    private async Task HandleSubmit(Customer customer)
    {
        if (Mode == "add")
        {
            await CustomerService.AddCustomerAsync(customer);
        }
        if (Mode == "view")
        {
            await CustomerService.GetCustomerAsync(customer.CustomerId);
        }
        if (Mode == "edit")
        {
            await CustomerService.UpdateCustomerAsync(customer);
        }

        await LoadCustomers();
        IsModalVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }
}
